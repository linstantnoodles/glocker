#!/usr/bin/env ruby
require 'open-uri'
require 'net/https'
require 'fileutils'
require 'json'
require 'yaml'

DIR = "#{Dir.home}/.glocker/"
CREDENTIALS_FILE = "#{DIR}credentials.yaml"

def jira_ticket_data_by_key(key)
  print "Retrieving your ticket data for key #{key}...\n"
  username = credentials['jira_username']
  password = credentials['jira_password']
  url = "https://jira.2u.com/rest/api/2/issue/#{key}?fields=assignee,summary,issuetype"
  open(url, http_basic_authentication: [username, password]) do |f|
    issue = JSON.parse(f.read)
    fields = issue['fields']
    return {
      type: fields['issuetype']['name'],
      summary: fields['summary']
    }
  end
end

def credentials
  YAML.load_file(CREDENTIALS_FILE)
end

def updated_pr_body_from_user_input(branch_name, body)
  dir = glock_file_dir(branch_name)
  pr_file_name = "#{dir}pull-request.md"
  new_pr_file = File.new(pr_file_name, 'w')
  new_pr_file.write(body)
  new_pr_file.close
  system("cat #{pr_file_name} | vim - +'w! #{pr_file_name}'")
  updated_file = File.new(pr_file_name, 'r')
  content = updated_file.read
  content
end

def format_template_file(path, substitution:)
  f = File.new(path, 'r')
  contents = f.read
  f.close
  contents.gsub(substitution[0], substitution[1])
end

def glock_file_dir(branch_name)
  "#{DIR}#{branch_name}/"
end

def read_glock_file_by_branch(branch)
  f = File.new("#{DIR}#{branch}/ticket.json", 'r')
  contents = f.read
  f.close
  JSON.parse(contents)
rescue Errno::ENOENT => e
  print "Unable to find ticket for branch \"#{branch}\".\n"
  exit
end

def create_glock_file(branch_name, data)
  issue_dir = glock_file_dir(branch_name)
  if !Dir.exists?(issue_dir)
    FileUtils.mkdir_p(issue_dir)
  end
  f = File.new("#{issue_dir}ticket.json", 'w')
  f.write(data.to_json)
  f.close
end


def pull_request_data_for_branch(branch:, base: 'master')
  root_project_dir = `git rev-parse --show-toplevel`
  pr_template_path = "#{root_project_dir.strip}/.github/pull_request_template.md"
  res = read_glock_file_by_branch(branch)

  key = res['key'].upcase
  type = res['type']
  summary = res['summary']
  title = "[#{key}][#{type}] #{summary}"
  body = format_template_file(pr_template_path, substitution: [
    "https://jira.2u.com/browse/<your-ticket-id>",
    "https://jira.2u.com/browse/#{key}"
  ])

  {
    title: title,
    body: updated_pr_body_from_user_input(branch, body),
    head: branch,
    base: base
  }
end

def current_branch
  `git rev-parse --abbrev-ref HEAD`.strip
end

def open_ticket_in_branch(branch)
  ticket_data = read_glock_file_by_branch(branch)
  url = "https://jira.2u.com/browse/#{ticket_data['key']}"
  `open #{url}`
end

def create_pull_request_for_branch(branch)
  if ['master', 'production'].include?(branch)
    print "You can't PR with \"master\" or \"production\"!\n"
    exit
  end

  remote_origin = `git config --get remote.origin.url`
  matches = remote_origin.match(/(git@github\.com):(\w+)\/(\w+)\.git/)
  owner = matches[2]
  repo = matches[3]
  pr_data = pull_request_data_for_branch(branch: branch)

  print "Pushing current branch \"#{branch}\" to remote ...\n"
  `git push`

  print "\n\n"
  print "Creating PR in #{repo} by #{owner}: \n"
  print "\n"
  print "Pull Request\n"
  print "-------------\n"
  print "Title: #{pr_data[:title]}\n\n"
  print "#{pr_data[:body]}\n\n"

  STDOUT.puts "Confirm? y/n"
  input = STDIN.gets.chomp
  raise "Aborting PR Creation." unless input.downcase == 'y'

  print "Pushing current branch \"#{branch}\" to remote ...\n"
  `git push`

  print "Creating PR ...\n"
  print "\n"
  api_endpoint = "https://api.github.com/repos/#{owner}/#{repo}/pulls?access_token=#{credentials['github_token']}"
  uri = URI.parse(api_endpoint)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  request = Net::HTTP::Post.new(uri.request_uri)
  request['Content-Type'] = 'applicaton/json'
  request.body = pr_data.to_json
  response = http.request(request)
  if response.code != '201'
    print "Creating PR failed :(\n"
    print "#{response.body}\n"
  end
end

def new_branch_and_glock_ticket_by_key(issue_key)
  ticket_data = jira_ticket_data_by_key(issue_key)
  branch_name = "#{issue_key.downcase}-#{ticket_data[:type].downcase}"

  print "Creating new branch \"#{branch_name}\" for [#{issue_key}] #{ticket_data[:summary]} ...\n"
  system("git checkout -b #{branch_name}")

  print "Creating ticket file #{branch_name} ... \n"
  create_glock_file(branch_name, {
    key: issue_key,
    summary: ticket_data[:summary],
    type: ticket_data[:type],
    date_created: Time.now.utc
  })
end

def list_all_glock_files
  result = `find ~/.glocker -maxdepth 2 -iname "*.json"`
  print "  All glock tickets\n"
  print "  -----------------\n"
  result.each_line do |line|
    branch = line.split('/')[-2]
    data = File.read(line.strip)
    parsed = JSON.parse(data)
    key = parsed["key"].upcase
    summary = parsed["summary"]
    type = parsed["type"]
    print "  (#{branch}) [#{key}][#{type}] #{summary}\n"
  end
end

commands_detail_list = [
  {
    name: 'cob',
    description: 'Check out a new branch by issue key (example: glock cob app-1)'
  },
  {
    name: 'open',
    description: 'Opens the ticket of current branch in browser'
  },
  {
    name: 'pr',
    description: 'Creates a new pull request for current branch against master'
  },
  {
    name: 'ls',
    description: 'Lists all branches tracked by glock'
  }
]

user_command = ARGV[0]
if !commands_detail_list.map {|x| x[:name]}.include?(user_command)
  print "\"#{user_command}\" is not a supported command.\n\n"
  print "Commands\n"
  commands_detail_list.each do |command_detail|
    print "  #{command_detail[:name]} - #{command_detail[:description]}\n"
  end
  exit
end

case user_command
when 'cob'
  issue_key = ARGV[1]
  if !issue_key
    print "Please provide an issue key (i.e app-11)\n"
    exit
  end
  new_branch_and_glock_ticket_by_key(issue_key)
when 'open'
  open_ticket_in_branch(current_branch)
when 'pr'
  create_pull_request_for_branch(current_branch)
when 'ls'
  list_all_glock_files
end
